import{r as P,g as W}from"./p5-CLnVVuBm.js";(function(){const t=document.createElement("link").relList;if(t&&t.supports&&t.supports("modulepreload"))return;for(const o of document.querySelectorAll('link[rel="modulepreload"]'))e(o);new MutationObserver(o=>{for(const i of o)if(i.type==="childList")for(const l of i.addedNodes)l.tagName==="LINK"&&l.rel==="modulepreload"&&e(l)}).observe(document,{childList:!0,subtree:!0});function s(o){const i={};return o.integrity&&(i.integrity=o.integrity),o.referrerPolicy&&(i.referrerPolicy=o.referrerPolicy),o.crossOrigin==="use-credentials"?i.credentials="include":o.crossOrigin==="anonymous"?i.credentials="omit":i.credentials="same-origin",i}function e(o){if(o.ep)return;o.ep=!0;const i=s(o);fetch(o.href,i)}})();var C=P();const j=W(C),V=[{ball:[48,45],hole:[297,310],obstacles:[],bounds:[[0,0],[200,0],[400,100],[400,400],[200,400],[200,200],[0,200]],guideText:"Pull back and release",par:2},{ball:[165,182],hole:[989,82],obstacles:[["Wall",[498,1,226,299]],["Teleporter",[882,172,340,181]]],bounds:[[0,0],[1200,0],[1200,300],[0,300]],guideText:"Teleporters teleport you places",par:2},{ball:[80,80],hole:[509,354],obstacles:[["Ice",[0,225,699,56]],["Slope",[378,22,104,184,[0,1]]]],bounds:[[0,0],[700,0],[700,400],[0,400]],guideText:"Ice breaks when you touch it",par:2},{ball:[49,48],hole:[66,1069],obstacles:[["Slope",[42,182,124,137,[0,1]]],["Slope",[313,437,249,115,[1,0]]],["Slope",[738,688,122,228,[0,1]]],["Slope",[215,1037,336,128,[-1,0]]]],bounds:[[0,0],[200,0],[200,400],[700,400],[900,600],[900,1e3],[700,1200],[0,1200],[0,1e3],[700,1e3],[700,600],[200,600],[0,400]],par:2},{ball:[406,43],hole:[406,711],obstacles:[["Bouncer",[128,197]],["Bouncer",[574,102]],["Bouncer",[345,318]],["Bouncer",[116,541]],["Bouncer",[504,669]],["Sand",[[[257,127],[406,291],[543,52]]]],["Sand",[[[344,504],[206,450],[36,495],[69,257],[273,243]]]],["Sand",[[[742,188],[637,242],[515,212],[491,363],[584,488],[752,352]]]],["Sand",[[[385,467],[480,440],[537,514],[514,601],[371,668],[418,549]]]],["Sand",[[[286,556],[170,617],[53,599],[66,724],[263,710]]]],["Bouncer",[433,390]],["Bouncer",[665,171]],["Bouncer",[188,68]],["Bouncer",[745,430]],["Bouncer",[237,522]],["Bouncer",[341,607]],["Bouncer",[658,499]],["Bouncer",[591,581]]],bounds:[[0,0],[800,0],[800,550],[550,750],[0,750]],par:7},{ball:[-25,54],hole:[541,698],obstacles:[["PolygonWall",[[[373,683],[485,705],[377,749],[327,712],[366,557]]]],["Slope",[112,247,181,140,[0,1]]]],bounds:[[-100,0],[300,0],[300,400],[500,600],[700,600],[600,800],[300,800],[300,600],[100,400],[100,200],[-100,200]],par:3},{ball:[240,108],hole:[396,553],obstacles:[["PolygonWall",[[[356,390],[395,471],[430,388],[523,379],[455,317],[467,234],[390,274],[310,235],[330,320],[254,367]]]],["Bouncer",[391,131]],["Bouncer",[208,266]],["Bouncer",[260,503]],["Bouncer",[540,497]],["Bouncer",[565,234]]],bounds:[[150,0],[500,0],[650,150],[650,600],[150,600]],par:5},{ball:[70,705],hole:[505,269],obstacles:[["Water",[[[546,250],[543,741],[56,740]]]]],bounds:[[550,200],[550,750],[0,750]],guideText:"Don't touch the water!",par:2},{ball:[399,152],hole:[805,150],obstacles:[["Ice",[335,3,28,296]],["Ice",[437,3,29,296]],["Ice",[487,3,25,296]],["Ice",[286,3,28,296]],["Ice",[232,3,31,296]],["Ice",[182,3,37,296]],["Ice",[137,3,31,296]],["Ice",[532,3,33,296]],["Ice",[579,3,34,296]],["Ice",[633,3,34,296]]],bounds:[[0,0],[750,0],[750,100],[850,100],[850,200],[750,200],[750,300],[0,300]],par:5},{ball:[61,195],hole:[956,55],obstacles:[["Bouncer",[235,56]],["Bouncer",[398,186]],["Bouncer",[595,58]],["Bouncer",[783,187]]],bounds:[[0,0],[1050,0],[1050,250],[0,250]],par:4},{ball:[26,166],hole:[197,657],obstacles:[["Teleporter",[720,188,92,177]],["Teleporter",[89,317,728,327]],["Teleporter",[730,473,92,454]],["Teleporter",[89,596,729,601]],["PolygonWall",[[[35,610],[35,715],[143,716]]]],["Slope",[68,9,41,119,[0,1]]],["Wall",[2,520,700,42]]],bounds:[[0,0],[800,0],[800,750],[0,750]],par:2},{ball:[69,162],hole:[1218,113],obstacles:[],bounds:[[50,0],[150,150],[250,0],[350,150],[450,0],[550,150],[650,0],[750,150],[850,0],[950,150],[1050,0],[1150,150],[1250,0],[1250,150],[1150,300],[1050,150],[950,300],[850,150],[750,300],[650,150],[550,300],[450,150],[350,300],[250,150],[150,300],[50,200]],par:6},{ball:[100,100],hole:[350,500],obstacles:[["Teleporter",[300,100,100,350]],["Teleporter",[300,150,100,500]],["Teleporter",[300,50,100,650]],["Wall",[0,200,200,100]]],bounds:[[0,0],[450,0],[450,200],[200,200],[200,300],[450,300],[450,400],[200,400],[200,450],[450,450],[450,550],[200,550],[200,600],[450,600],[450,700],[0,700]],par:2},{ball:[666,160],hole:[691,757],obstacles:[["Bouncer",[377,282]],["Bouncer",[446,377]],["Bouncer",[510,471]],["Bouncer",[597,368]],["Bouncer",[516,271]],["Bouncer",[602,565]],["Bouncer",[681,467]],["Bouncer",[834,465]],["Bouncer",[749,559]],["Bouncer",[675,664]],["Bouncer",[741,364]],["Bouncer",[865,360]],["Bouncer",[670,272]],["Bouncer",[808,259]],["Bouncer",[935,245]],["Slope",[174,13,897,92,[0,1]]]],bounds:[[1100,0],[100,0],[700,900]],par:4},{ball:[80,80],hole:[391,63],obstacles:[["Sand",[[[243,17],[134,12],[121,59],[149,97],[202,128],[281,84],[311,34]]]]],bounds:[[0,0],[526,-2],[528,168],[3,177]],par:2},{ball:[-50,50],hole:[250,300],bounds:[[50,0],[50,-100],[200,-100],[200,0],[300,0],[300,75],[375,75],[375,200],[300,200],[300,350],[200,350],[200,250],[150,250],[150,350],[0,350],[0,250],[0,100],[-100,100],[-100,0]],obstacles:[["Bouncer",[125,25]],["Bouncer",[50,100]],["Bouncer",[200,100]],["Bouncer",[125,175]]],par:4},{ball:[58,-847],hole:[594,186],obstacles:[["Slope",[444,-494,323,488,[0,1]]],["Bouncer",[175,-646]],["Bouncer",[423,-846]],["Bouncer",[705,-638]],["Bouncer",[828,-772]],["PolygonWall",[[[251,-795],[302,-559],[522,-646],[570,-539],[647,-759],[379,-661]]]],["Water",[[[268,85],[405,145],[401,50]]]],["Water",[[[819,41],[953,35],[856,148]]]],["PolygonWall",[[[973,-821],[997,-779],[991,-706],[968,-664],[889,-597],[827,-665],[903,-691],[953,-758],[892,-830],[799,-845],[926,-848]]]]],bounds:[[0,0],[400,0],[400,-500],[200,-500],[0,-700],[0,-900],[500,-900],[1100,-900],[1100,-700],[800,-500],[800,0],[1200,0],[600,300]],par:5},{ball:[95,145],hole:[280,479],obstacles:[["Wall",[4,346,195,48]],["Teleporter",[167,437,99,230]],["Water",[[[22,440],[73,429],[101,512],[17,543]]]],["Bouncer",[176,622]]],bounds:[[0,100],[200,100],[200,400],[400,400],[400,700],[0,700]],par:3},{ball:[80,80],hole:[1149,666],obstacles:[["Sand",[[[1032,198],[981,252],[720,248],[602,264],[529,242],[490,100],[626,150],[989,56]]]],["Sand",[[[1109,448],[1093,349],[677,476],[733,676]]]],["Water",[[[544,485],[53,436],[83,708],[534,679]]]],["Bouncer",[220,108]],["Ice",[928,621,164,62]],["Ice",[1099,515,120,94]],["Ice",[1003,555,92,62]],["Teleporter",[482,363,28,33]],["Wall",[620,296,621,31]],["Wall",[617,411,28,329]],["Slope",[312,16,134,311,[1,0]]]],bounds:[[0,0],[1250,0],[1250,750],[0,750]],par:7},{ball:[58,60],hole:[441,364],obstacles:[["Water",[[[438,78],[379,-66],[209,-14]]]],["Bouncer",[274,128]],["Bouncer",[284,306]],["Sand",[[[55,312],[30,518],[204,448],[159,346]]]],["Bouncer",[125,205]],["PolygonWall",[[[251,171],[251,241],[193,207]]]]],bounds:[[0,0],[400,-100],[600,350],[0,600]],par:3},{ball:[149,100],hole:[998,102],obstacles:[["PolygonWall",[[[63,219],[25,295],[19,378],[99,372],[251,285],[121,274]]]],["PolygonWall",[[[267,127],[287,239],[253,168],[186,164]]]],["PolygonWall",[[[167,504],[145,379],[93,475],[158,556],[284,581]]]],["Slope",[301,439,547,233,[1,0]]],["PolygonWall",[[[914,340],[910,386],[958,430],[950,355],[1004,317]]]],["PolygonWall",[[[1055,266],[1074,368],[1014,407],[1122,382]]]],["PolygonWall",[[[900,153],[1046,188],[943,202],[932,312]]]]],bounds:[[0,0],[300,0],[300,400],[850,400],[850,0],[1150,0],[1150,450],[850,750],[300,750],[0,450]],par:6}];function u(r,t,s,e){return r.dist(s)<=t+e}function B(r,t,s,e,o,i,l){let h,a;r<e?h=e:r>e+i?h=e+i:h=r,t<o?a=o:t>o+l?a=o+l:a=t;const c=r-h,n=t-a;return Math.sqrt(c**2+n**2)<s}function I(r,t,s,e){const o=p5.Vector.sub(r,s),i=p5.Vector.sub(e,s),l=i.setMag(o.dot(i)/i.mag()).add(s);return l.dist(s)+l.dist(e)>s.dist(e)+t?!1:l.dist(r)<t?l:!1}function g(r,t,s){for(let e=0;e<s.length;e++){const o=(e+1)%s.length,i=createVector(...s[e]),l=createVector(...s[o]),h=I(r,t,i,l);if(h)return{projPoint:h,edge:p5.Vector.sub(l,i)}}return!1}function E(r,t){let s=!1;const e=r.x,o=r.y;for(let i=0;i<t.length;i++){const l=(i+1)%t.length,h=createVector(...t[i]),a=createVector(...t[l]);(h.y>=o&&a.y<o||h.y<o&&a.y>=o)&&e<(a.x-h.x)*(o-h.y)/(a.y-h.y)+h.x&&(s=!s)}return s}function tt(r,t,s,e,o,i){return r>=s&&t>=e&&r<=s+o&&t<=e+i}class T{x;y;w;h;constructor(t,s,e,o){this.x=t,this.y=s,this.w=e,this.h=o}draw(){fill(0,.25*255),rect(this.x+1.5,this.y+1.5,this.w,this.h),fill(255),rect(this.x,this.y,this.w,this.h)}collide(t){let s=t.pos.x,e=t.pos.y;s<this.x&&(t.vel.x*=-1,t.pos.x=this.x-t.r),s>this.x+this.w&&(t.vel.x*=-1,t.pos.x=this.x+this.w+t.r),e<this.y&&(t.vel.y*=-1,t.pos.y=this.y-t.r),e>this.y+this.h&&(t.vel.y*=-1,t.pos.y=this.y+this.h+t.r)}isColliding(t){return B(t.pos.x,t.pos.y,t.r,this.x,this.y,this.w,this.h)}}const m=7;class M{pos;r;hit;constructor(t,s){this.pos=createVector(t,s),this.r=30,this.hit=0}draw(){let t=this.hit;push(),translate(this.pos.x,this.pos.y),scale(1+t/25),fill(0,.25*255),circle(1.5,1.5,this.r*2+t),fill(255,255,0),circle(0,0,this.r*2+t),fill(150,150,0),circle(0,0,10),rotate(t/10);for(let s=0;s<m;s++)rotate(2*PI/m),triangle(0,-20,5,-15,-5,-15),rect(-2.5,-16,5,5);pop(),this.hit>0&&this.hit--}isColliding(t){return u(t.pos,t.r,this.pos,this.r)}collide(t){let s=p5.Vector.sub(t.pos,this.pos);t.applyForce(s.setMag(16)),this.hit=10}}class D extends T{disabled;shatter;normal;mag;constructor(t,s,e,o){super(t,s,e,o),this.disabled=!1,this.shatter=createVector(this.x,this.y),this.normal=createVector(0,0),this.mag=max(e,o)}draw(){if(!this.disabled)push(),strokeWeight(8),stroke(58,132,181,125),fill(145,204,242,200),rect(this.x+4,this.y+4,this.w-8,this.h-8),pop();else{push(),strokeWeight(4),stroke(255,125),fill(123,0,255,20),rect(this.x+1,this.y+1,this.w-2,this.h-2),beginClip(),rect(this.x+1,this.y+1,this.w-2,this.h-2),endClip(),strokeWeight(4),stroke(255,100);for(let t=0;t<PI/2;t+=.5){let s=p5.Vector.rotate(this.normal,t).mult(this.mag).add(this.shatter);line(this.shatter.x,this.shatter.y,s.x,s.y),t!=0&&(s=p5.Vector.rotate(this.normal,-t).mult(this.mag).add(this.shatter),line(this.shatter.x,this.shatter.y,s.x,s.y))}pop()}}collide(t){let s=t.pos.x,e=t.pos.y;s<this.x&&(this.shatter.y=t.pos.y,this.normal=createVector(1,0)),s>this.x+this.w&&(this.shatter.x=this.x+this.w,this.shatter.y=t.pos.y,this.normal=createVector(-1,0)),e<this.y&&(this.shatter.x=t.pos.x,this.normal=createVector(0,1)),e>this.y+this.h&&(this.shatter.y=this.y+this.h,this.shatter.x=t.pos.x,this.normal=createVector(0,-1)),super.collide(t),this.disabled=!0}isColliding(t){return!this.disabled&&super.isColliding(t)}}class L{points;constructor(t){this.points=t}draw(){fill(0,.25*255),beginShape();for(const[t,s]of this.points)vertex(t+1.5,s+1.5);endShape(),push(),fill(255),beginShape();for(const[t,s]of this.points)vertex(t,s);endShape(),pop()}collide(t,{projPoint:s,edge:e}){let o=p5.Vector.sub(t.pos,s),i=t.vel.mag(),l=Math.abs(t.vel.angleBetween(e));t.pos.add(p5.Vector.setMag(o,t.r-o.mag())),t.applyForce(o.setMag(2*Math.sin(l)*i))}isColliding(t){return g(t.pos,t.r,this.points)}}const O=.05;class R{points;constructor(t){this.points=t}draw(){push(),strokeWeight(16),stroke(217,210,111),fill(255,247,128),beginShape();for(const[t,s]of this.points)vertex(t,s);endShape(CLOSE),pop()}collide(t){t.vel.mult(1-O)}isColliding(t){return g(t.pos,t.r,this.points)||E(t.pos,this.points)}}const p=10;class _{x;y;w;h;force;colors;constructor(t,s,e,o,i){this.x=t,this.y=s,this.w=e,this.h=o,this.force=createVector(...i).mult(.35),this.colors=[];const l=color(100,.1*255),h=color(100,.5*255);for(let a=0;a<p;a++)this.colors.push(lerpColor(l,h,a/p))}draw(){const t=this.force.heading();push(),noFill(),strokeWeight(.1),stroke(0),rect(this.x,this.y,this.w,this.h),pop();let s=this.x+this.w/2,e=this.y+this.h/2;push(),fill(255),translate(s,e),this.drawGradient(t),rotate(t),triangle(-5,-10,5,0,-5,10),pop()}drawGradient(t){push(),scale(this.w,this.h),rotate(t);const s=1/p;for(let e=0;e<p;e++)fill(this.colors[e]),rect(-.5+s*e,-.5,s,1);pop()}isColliding(t){return B(t.pos.x,t.pos.y,t.r,this.x,this.y,this.w,this.h)}collide(t){t.applyForce(this.force)}}const A=.3,y=10;class F{start;end;r;hasTeleportedTo;portalTick;constructor(t,s,e,o){this.start=createVector(e,o),this.end=createVector(t,s),this.r=14,this.hasTeleportedTo=null,this.portalTick=[0,-y,-2*y]}draw(){push(),noFill(),strokeWeight(8),stroke(48,18,102,.4*255),circle(this.end.x,this.end.y,this.r*2+8),strokeWeight(4),stroke(48,18,102),circle(this.end.x,this.end.y,this.r*2),strokeWeight(8),stroke(192,216,224,.4*255),circle(this.start.x,this.start.y,this.r*2+8),strokeWeight(4),stroke(192,216,224),circle(this.start.x,this.start.y,this.r*2);const t=this.r*2-2+y/2;for(let s=0;s<3;s++){this.portalTick[s]+=A,this.portalTick[s]%=t;const o=max(this.portalTick[s],0);o>0&&(strokeWeight(1-o/t),stroke(192,216,224),circle(this.start.x,this.start.y,o),stroke(48,18,102),circle(this.end.x,this.end.y,o))}pop()}collide(t,s){let e,o;s=="start"?e=this.start.copy():e=this.end.copy(),this.hasTeleportedTo=="start"?o=this.start.copy():o=this.end.copy(),!(t.pos.dist(o)<=this.r+t.r)&&(t.pos=e)}isColliding(t){return u(t.pos,t.r,this.start,this.r)?(this.hasTeleportedTo||(this.hasTeleportedTo="end"),"end"):u(t.pos,t.r,this.end,this.r)?(this.hasTeleportedTo||(this.hasTeleportedTo="start"),"start"):(this.hasTeleportedTo=null,null)}}class N{points;render;cx;cy;startColor;toColor;constructor(t){this.points=t;let s=0,e=0;for(const[o,i]of t)s+=o,e+=i;s/=t.length,e/=t.length,this.render=[];for(const[o,i]of t)this.render.push([o-s,i-e]);this.cx=s,this.cy=e,this.startColor=color(61,137,255),this.toColor=color(0,73,186)}draw(){fill(40,150,255),push(),translate(this.cx,this.cy),scale(1);for(let t=-1;t<4;t++){let s;t==-1?s=color(255,247,128):s=lerpColor(this.startColor,this.toColor,t/4),fill(s),beginShape();for(const[e,o]of this.render)vertex(e,o);endShape(),scale(.9)}pop()}collide(t){t.pos=t.prevPos.copy(),t.vel.setMag(0)}isColliding(t){return g(t.pos,t.r,this.points)}}const G={Bouncer:M,Ice:D,PolygonWall:L,Sand:R,Slope:_,Teleporter:F,Wall:T,Water:N},k=V;function st(r){return r<k.length}function et(r){return k[r]}function H(r){const[t,s]=r,e=G[t];return new e(...s)}class ot{mousePressed(){}mouseReleased(){}mouseDragged(){}mouseWheel(t){}keyPressed(){}windowResized(){}}const b=2,f=10,U=.03,d=30,v=20,z=500,w=200,S=200;class X{pos;ball;minx;miny;maxx;maxy;scale;aspectScale;absBounds;constructor(t,s,e,o,i){this.ball=t,this.pos=t.pos.copy(),this.absBounds={minx:s,miny:e,maxx:o,maxy:i},this.windowResized(),this.scale=1}draw(){this.pos.x=constrain(lerp(this.pos.x,this.ball.pos.x,.1),this.minx,this.maxx),this.pos.y=constrain(lerp(this.pos.y,this.ball.pos.y,.1),this.miny,this.maxy),translate(width/2,height/2),scale(this.aspectScale),scale(this.scale),translate(-this.pos.x,-this.pos.y);const t=createVector(mouseX,mouseY).sub(createVector(width/2,height/2)).div(this.aspectScale).div(this.scale).add(this.pos);window.mousex=t.x,window.mousey=t.y}scaleTo(t){this.scale=lerp(this.scale,t,.1)}windowResized(){const t=this.absBounds,s=(t.minx+t.maxx)/2,e=(t.miny+t.maxy)/2;this.minx=Math.min(t.minx+w,s),this.miny=Math.min(t.miny+S,e),this.maxx=Math.max(t.maxx-w,s),this.maxy=Math.max(t.maxy-S,e);const o=Math.min(width,height)/z;this.aspectScale=o}}class Y{pos;r;constructor(t,s){this.pos=createVector(t,s),this.r=12}draw(){fill(0),circle(this.pos.x,this.pos.y,this.r*2)}checkBall(t,s){if(u(t.pos,t.r,this.pos,this.r)){t.vel.mag()<.001&&!t.inHole&&(s(),t.inHole=!0),t.vel.mult(.9);let e=p5.Vector.sub(this.pos,t.pos);t.applyForce(e.setMag(this.pos.dist(t.pos)*.1))}}}const $=.016;class q{pos;vel;r;prevPos;constructor(t,s,e=10){this.pos=createVector(t,s),this.vel=createVector(0,0),this.r=e,this.prevPos=this.pos.copy()}draw(){fill(0,.25*255),circle(this.pos.x+1.5,this.pos.y+1.5,this.r*2),push(),fill(255),strokeWeight(1),stroke(0,.25*255),circle(this.pos.x,this.pos.y,this.r*2),pop()}applyForce(t){this.vel.add(t)}update(t,s=1){this.checkBounds(t),this.pos.add(p5.Vector.div(this.vel,s)),this.vel.mult(1-$/s),this.vel.limit(f),this.vel.mag()>0&&this.vel.mag()<U&&(this.prevPos=this.pos.copy(),this.vel.setMag(0))}checkBounds(t){let{projPoint:s,edge:e}=g(this.pos,this.r,t);if(s){let o=p5.Vector.sub(this.pos,s),i=this.vel.mag(),l=Math.abs(this.vel.angleBetween(e));this.pos.add(p5.Vector.setMag(o,this.r-o.mag())),this.applyForce(o.setMag(2*Math.sin(l)*i))}}}const x=15,J=10,K=.2;class Q extends q{inHole=!1;dragStart;idleTick;constructor(t,s){super(t,s,10),this.idleTick=0}draw(){if(this.dragStart&&this.canShoot()&&this.showDrag(),super.draw(),this.dragStart&&(this.idleTick=0),!this.dragStart&&this.vel.mag()==0){this.idleTick+=K,this.idleTick%=x+J;const t=this.idleTick;t<15&&(noFill(),stroke(255,sin((t-1)/x*PI)*128),strokeWeight(1+.5*sin((t/(x/2)-.5)*PI)),circle(this.pos.x,this.pos.y,this.r+20+t))}}showDrag(){let t=this.getDir();if(!(t.mag()<v)){fill(0,.25*255);for(let s=1;s<6;s++){const e=createVector().lerp(t,s/5);circle(e.x+this.pos.x,e.y+this.pos.y,5)}}}getDir(){return p5.Vector.sub(this.dragStart,createVector(mouseX,mouseY)).mult(2).limit(f*d)}canShoot(){return!this.inHole&&this.vel.mag()==0}}class it{nextLevel;camera;ball;hole;par;guideText;strokes;bounds;obstacles;constructor(t,s){this.nextLevel=s,this.strokes=0,this.ball=new Q(...t.ball),this.hole=new Y(...t.hole),this.par=t.par,this.guideText=t.guideText||"";const e=t.bounds;this.bounds=e,this.obstacles=t.obstacles.map(a=>H(a));let o=e[0][0],i=e[0][1],l=e[0][0],h=e[0][1];for(let a=1;a<e.length;a++){let[c,n]=e[a];c<o&&(o=c),n<i&&(i=n),c>l&&(l=c),n>h&&(h=n)}this.camera=new X(this.ball,o,i,l,h)}draw(){background(161,207,161),push(),this.drawCamera(),this.drawGround();for(const t of this.obstacles)t.draw();this.hole.draw(),this.ball.draw(),this.drawBorders(),this.checkCollisions(),pop(),this.drawHUD()}drawGround(){push(),fill(55,204,43),strokeWeight(3),stroke(0,.25*255),beginShape();for(const[t,s]of this.bounds)vertex(t+1.5,s+1.5);endShape(CLOSE),pop()}drawBorders(){push(),noFill(),strokeWeight(3),stroke(255),beginShape();for(const[t,s]of this.bounds)vertex(t,s);endShape(CLOSE),pop()}drawCamera(){if(this.camera.draw(),this.ball.canShoot()&&this.ball.dragStart){const t=f*d/(this.ball.getDir().mag()+f*d);this.camera.scaleTo(t)}else this.camera.scaleTo(1)}drawHUD(){push(),fill(255),stroke(0),strokeWeight(3),textAlign(CENTER),textSize(30),text(this.guideText,0,50,width),textAlign(LEFT),textSize(20),text(`Stroke: ${this.strokes}
Par: ${this.par}`,10,height-60),pop()}checkCollisions(){for(let t=0;t<b;t++){this.ball.update(this.bounds,b);for(const s of this.obstacles){const e=s.isColliding(this.ball);e&&s.collide(this.ball,e)}}this.hole.checkBall(this.ball,()=>this.nextLevel())}debugMousePressed(){const t=createVector(6.6,8.7);console.log("ballPos:",this.ball.pos.toString(),`
`,"Vec:",t.toString(),`
`,`
-----
`),this.ball.vel=t}mousePressed(){this.ball.canShoot()&&(this.ball.dragStart=createVector(mouseX,mouseY))}mouseReleased(){if(!this.ball.canShoot()||!this.ball.dragStart)return;const t=this.ball.getDir();if(this.ball.dragStart=null,t.mag()<v)return;const s=t.div(d);this.ball.vel=s,this.strokes++}windowResized(){this.camera.windowResized()}}class rt{progress;direction;onDone;constructor(){this.progress=0,this.direction=0}draw(){fill(255,this.progress),rect(0,0,width,height),this.direction!=0&&this.update()}update(){this.progress+=this.direction*5,this.progress==300&&(this.onDone(),this.direction=-1),this.progress<0&&this.end()}end(){this.direction=0,this.progress=0}transition(t){this.direction=1,this.onDone=t}}export{q as B,it as G,Y as H,D as I,Q as M,L as P,ot as S,rt as T,N as W,j as a,T as b,M as c,_ as d,R as e,F as f,et as g,st as l,G as n,tt as p};
