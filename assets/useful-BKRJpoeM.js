import{c as f,G as b,M as y,H as g,C as d,a as K,W as u,b as k,I as j,B as x,P,S as v,T as S,p as w}from"./gameManager-BQGXjD-H.js";class E{constructor(t,o,s,n,i){this.x=t,this.y=o,this.w=s,this.h=n,this.force=i.mult(.35)}draw(){fill(255,255,255,125),rect(this.x,this.y,this.w,this.h),fill(255);let t=this.x+this.w/2,o=this.y+this.h/2;push(),translate(t,o),rotate(this.force.heading()),triangle(-5,-10,5,0,-5,10),pop()}isColliding(t){return f(t.pos.x,t.pos.y,t.r,this.x,this.y,this.w,this.h)}collide(t){t.applyForce(this.force)}}class a{constructor(t,o,s){this.pos=createVector(t,o),this.r=4,this.selected=!1,this.prevPos=createVector(t,o),this.parent=s}draw(){this.update(),push(),this.selected||this.pos.dist(mousePos)<this.r?(strokeWeight(1),stroke(0),fill(0,138,124)):fill(0,186,168),circle(this.pos.x,this.pos.y,this.r*2),pop()}update(){this.prevPos=this.pos.copy(),this.selected&&(this.pos=mousePos,this.parent.update(this,p5.Vector.sub(this.pos,this.prevPos)))}check(){return!mouseIsPressed&&this.selected&&(this.selected=!1),mouseIsPressed&&!this.selected&&this.pos.dist(mousePos)<this.r&&(this.selected=!0),this.selected}}class l{constructor(t,o=!0){this.obj=t,this.knot=new a(t.pos.x,t.pos.y,this),o&&main.staticKnots.push(this.knot)}draw(){this.obj.draw(),this.knot.draw()}update(){this.obj.pos=this.knot.pos}}class I extends b{constructor(){super(),this.hasSelected=!1,this.staticKnots=[],this.playMode=!0}init(){this.mainb=new l(new y(80,80),!1),this.hole=new l(new g(width-80,height-80),!1),this.balls.push(this.mainb),this.levelBounds=[[0,0],[width,0],[width,height],[0,height]]}draw(){if(background(123,255,123),this.playMode){for(let t=0;t<d;t++)for(let o=0;o<this.balls.length;o++){const s=this.balls[o].obj;s.update(d);for(let n=0;n<this.balls.length;n++){if(o==n)continue;const i=this.balls[n].obj;K(s.pos,s.r,i.pos,i.r)&&s.collide(i)}for(const n of this.staticObjs){const i=n.obj.isColliding(s);i&&n.obj.collide(s,i)}}for(const t of this.staticObjs)t.obj.draw();this.hole.obj.draw();for(const t of this.balls)t.obj.draw()}else{for(const t of this.staticObjs)t.draw();this.hole.draw();for(const t of this.balls)t.draw();this.hasSelected||this.checkKnots()}}checkKnots(){if(!this.selectedPolygon){for(let t=this.balls.length-1;t>=0;t--)if(this.balls[t].knot.check()){this.hasSelected=!0;return}if(this.hole.knot.check()){this.hasSelected=!0;return}for(let t=this.staticKnots.length-1;t>=0;t--)if(this.staticKnots[t].check()){this.hasSelected=!0;return}}}}function m(e,t){const o=document.createElement("div"),s=document.createElement("input");s.value=t;const n=document.createElement("button");return n.innerHTML="&times;",n.addEventListener("click",()=>{for(let i=0;i<main.staticObjs.length;i++){const h=main.staticObjs[i];if(e==h){main.staticObjs.splice(i,1);break}}o.remove()}),o.append(s,n),o}function C(e,t){console.log("yeah?");const o=m(e,t),s=document.createElement("button");return s.textContent="rotate",s.addEventListener("click",()=>{e.obj.force.rotate(PI/2)}),o.append(s),o}class r{constructor(t){this.obj=t,this.knots=[],this.centerKnot=new a(0,0,this),main.staticKnots.push(this.centerKnot)}draw(){this.obj.draw();for(const t of this.knots)t.draw();this.centerKnot.draw()}convertKnots(){return this.knots.map(t=>[t.pos.x,t.pos.y])}update(t,o){if(t==this.centerKnot)for(const s of this.knots)s.pos.add(o);else{let s=0,n=0;for(const i of this.knots)s+=i.pos.x,n+=i.pos.y;s/=this.knots.length,n/=this.knots.length,this.centerKnot.pos=createVector(s,n)}if(this.obj instanceof u){const s=this.centerKnot.pos.x,n=this.centerKnot.pos.y;this.obj.cx=s,this.obj.cy=n;const i=[];for(const h of this.knots)i.push([h.pos.x-s,h.pos.y-n]);this.obj.render=i}this.obj.points=this.convertKnots()}addPoint(t,o){const s=new a(t,o,this);this.knots.push(s),main.staticKnots.push(s),this.update()}}class p extends a{constructor(t,o,s,n,i){super(t,o,s),this.originKnot=n,this.axis=i}originUpdate(t){this.pos.add(t)}update(){if(this.prevPos=this.pos.copy(),this.selected){const t=mousePos,o=p5.Vector.sub(t,this.originKnot.pos),s=p5.Vector.setMag(this.axis,o.dot(this.axis)/this.axis.mag()).add(this.originKnot.pos);this.pos=s,this.parent.update(this,p5.Vector.sub(this.pos,this.prevPos))}}}class c{constructor(t){this.obj=t,this.posKnot=new a(this.obj.x,this.obj.y,this),this.widthKnot=new p(this.obj.x+this.obj.w,this.obj.y,this,this.posKnot,createVector(1,0)),this.heightKnot=new p(this.obj.x,this.obj.y+this.obj.h,this,this.posKnot,createVector(0,1)),main.staticKnots.push(this.posKnot,this.widthKnot,this.heightKnot)}draw(){this.obj.draw(),this.posKnot.draw(),this.widthKnot.draw(),this.heightKnot.draw()}update(t,o){t==this.posKnot&&(this.widthKnot.originUpdate(o),this.heightKnot.originUpdate(o));const s=this.posKnot.pos;this.obj.x=s.x,this.obj.y=s.y,this.obj.w=this.widthKnot.pos.x-s.x,this.obj.h=this.heightKnot.pos.y-s.y}}class V{constructor(t){this.obj=t,this.startKnot=new a(t.start.x,t.start.y,this),this.endKnot=new a(t.end.x,t.end.y,this),main.staticKnots.push(this.startKnot,this.endKnot)}draw(){this.obj.draw(),this.startKnot.draw(),this.endKnot.draw()}update(){this.obj.start=this.startKnot.pos,this.obj.end=this.endKnot.pos}}const M=[{name:"Square Wall",create:(e,t)=>new c(new k(e,t,30,30))},{name:"Ice",create:(e,t)=>new c(new j(e,t,30,30))},{name:"Bouncer",create:(e,t)=>new l(new x(e,t))},{name:"Slope",create:(e,t)=>new c(new E(e,t,30,30,createVector(1,0))),render:C},{name:"Polygon Wall",create:()=>{const e=new r(new P([]));return main.selectedPolygon=e,e}},{name:"Water",create:()=>{const e=new r(new u([]));return main.selectedPolygon=e,e}},{name:"Sand",create:()=>{const e=new r(new v([]));return main.selectedPolygon=e,e}},{name:"Teleporter",create:(e,t)=>new V(new S(e,t,e,t))}],L=document.querySelector(".object-template"),T=document.querySelector(".objects-list");for(const e of M){const t=document.createElement("button");t.textContent=e.name,t.addEventListener("click",()=>{const o=e.create(width/2,height/2);main.staticObjs.push(o),console.log(o);const n=(e.render||m)(o,e.name);T.append(n)}),L.append(t)}window.p5=w;window.mousex=void 0;window.mousey=void 0;window.main=new I;window.setup=()=>{noStroke();const e=createCanvas(.8*windowWidth,windowHeight).parent(document.querySelector(".canvas-content"));e.mousePressed(U),e.elt.addEventListener("selectstart",t=>t.preventDefault()),e.elt.addEventListener("contextmenu",t=>t.preventDefault()),main.init()};window.draw=()=>{window.mousePos=createVector(mouseX,mouseY),main.draw(),main.selectedPolygon&&(fill(0),textAlign(CENTER),textSize(20),text(`Left click to add vertex, Right click to remove vertex
Esc to finish`,width/2,30))};function U(){if(!main.selectedPolygon)return;let e=main.selectedPolygon;if(mouseButton==LEFT)e.addPoint(mouseX,mouseY);else if(mouseButton==RIGHT){for(let t=e.knots.length-1;t>=0;t--)if(e.knots[t].check()){e.knots.splice(t,1),e.update();break}}return!1}window.mouseClicked=()=>{if(main.playMode){const e=w.Vector.sub(createVector(mouseX,mouseY),main.mainb.obj.pos).div(32);main.mainb.obj.vel=e}};window.keyPressed=()=>{main.selectedPolygon&&key=="Escape"&&(main.selectedPolygon=null)};window.mouseReleased=()=>{main.hasSelected=!1};document.querySelector(".play-btn").addEventListener("click",()=>{main.playMode=!main.playMode});
